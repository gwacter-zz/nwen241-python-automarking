This is a doctest based regression suite for assignment1.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import the functions
>>> print("TEST: Pythagoras MAX: 5 MULTIPLIER: 3")
TEST: Pythagoras MAX: 5 MULTIPLIER: 3
>>> from assignment1 import pythagoras

Test the pythagoras code
>>> pythagoras(3,4)
5.0
>>> pythagoras(4,3)
5.0
>>> pythagoras(0,3)
First leg is invalid
>>> pythagoras(3,0)
Second leg is invalid
>>> pythagoras(3,3)
4.2
>>> 


This is a doctest based regression suite for assignment1.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import the functions
>>> print("TEST: Distance MAX: 1 MULTIPLIER: 15")
TEST: Distance MAX: 1 MULTIPLIER: 15
>>> from assignment1 import distance

Test the distance calculation
>>> for t in range(0,10):
...     distance(t,9.8)
... 
0.0
4.9
19.6
44.1
78.4
122.5
176.4
240.1
313.6
396.9


This is a doctest based regression suite for assignment1.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import the functions
>>> print("TEST: Print Before MAX: 8 MULTIPLIER: 2")
TEST: Print Before MAX: 8 MULTIPLIER: 2
>>> from assignment1 import print_before

Test the list problem:
>>> print_before(["a","b","c"],"b")
['a']
>>> print_before(["a","b","c"],"c")
['a', 'b']
>>> print_before(["a","b","c"],"")
['a', 'b', 'c']
>>> print_before([],"")
[]
>>> print_before([],"a")
[]
>>> print_before([],[])
Expected a string
>>> print_before([],"a")
[]
>>> print_before("","a")
Expected a list of words


This is a doctest based regression suite for assignment1.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import the functions
>>> print("TEST: Grading MAX: 15 MULTIPLIER: 1")
TEST: Grading MAX: 15 MULTIPLIER: 1
>>> from assignment1 import grade

Test the grading code
>>> grade(0, True)
E
>>> grade(40, True)
D
>>> grade(45, True)
D
>>> grade(50, True)
C
>>> grade(55, True)
C
>>> grade(55, False)
K
>>> grade(66, True)
B
>>> grade(66, False)
K
>>> grade(76, False)
K
>>> grade(76, True)
B
>>> grade(86, True)
A
>>> grade(86, False)
K
>>> grade(0.0,True)
Invalid mark
>>> grade(0.0,False)
Invalid mark
>>> grade(0,"dsafdsfd")
Invalid mcr


